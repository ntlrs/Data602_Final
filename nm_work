import requests as r
import pandas as pd
import datetime
import json
from time import strftime, gmtime
import matplotlib.pyplot as plt
import numpy as np


url = 'https://rest.coinapi.io/v1/quotes/latest?limit=10000'
headers = {'X-CoinAPI-Key' : 'F2F35C56-BE67-4A86-BC00-D5620A306611'}
coin = r.get(url, headers=headers)
data = coin.text
parsed = json.loads(data)
coin_df = pd.DataFrame.from_dict(parsed, orient='columns')

all_exchanges_df = coin_df
all_exchanges_df[['exchange','pair']] = coin_df['symbol_id'].str.split('_', expand=True, n=1)
all_exchanges_list = ['BINANCE', 'POLONIEX', 'BITFINEX']

exchanges2_df = all_exchanges_df[all_exchanges_df.exchange.isin(all_exchanges_list)]

ask_price_df = exchanges2_df[['ask_price', 'exchange', 'pair']]
bid_price_df = exchanges2_df[[ 'bid_price', 'exchange', 'pair']]

ask_price_df = ask_price_df.drop_duplicates(['exchange','pair'])
ask_price_df = ask_price_df.pivot(index='pair', columns='exchange')
ask_price_df = ask_price_df.dropna()
ask_price_df.columns = ask_price_df.columns.droplevel(0)
ask_price_df = ask_price_df.rename_axis(None, axis=1)

bid_price_df = bid_price_df.drop_duplicates(['exchange','pair'])
bid_price_df = bid_price_df.pivot(index='pair', columns='exchange')
bid_price_df = bid_price_df.dropna()
bid_price_df.columns = bid_price_df.columns.droplevel(0)
bid_price_df = bid_price_df.rename_axis(None, axis=1)

spread_df= pd.DataFrame()
spread_df["Binance/Bitfinex"] = bid_price_df.iloc[:,0] - ask_price_df.iloc[:,1]
spread_df["Binance/Poloniex"] = bid_price_df.iloc[:,0] - ask_price_df.iloc[:,2]
spread_df["Bitfinex/Binance"] = bid_price_df.iloc[:,1] - ask_price_df.iloc[:,0]
spread_df["Bitfinex/Poloniex"] = bid_price_df.iloc[:,1] - ask_price_df.iloc[:,2]
spread_df["Poloniex/Binance"] = bid_price_df.iloc[:,2] - ask_price_df.iloc[:,0]
spread_df["Poloniex/Bitfinex"] = bid_price_df.iloc[:,2] - ask_price_df.iloc[:,1]
spread_df = spread_df.reset_index()



spread_df = pd.melt(spread_df, id_vars='pair')
spread_df.columns = ["Pair", "Exchanges", "Arbitrage Value"]

top_5 = spread_df.nlargest(5, 'Arbitrage Value')



def main():    

    pair = ["BCH-BTC", "BCH-ETH","DASH-BTC", "ETC-BTC", "ETH-BTC", "LTC-BTC", "OMG-BTC", "OMG-ETH", "XMR-BTC", "XRP-BTC", "ZEC-BTC", "ZRX-BTC","ZRX-ETH"]


    menu = ('Get Prices For Available Trading Pairs', 'Historical', 'Best Chances for Arbitrage', 'Quit')
    while True:
        print("\n")
        print("Arbitrage On Exchanges")
        print("\n")
        print("Find Arbitrage Opportunities for Trading Pairs On Poloniex, Binance, and Bitfinex")
        choice = display_menu(menu,exit_option=5)
        if choice == 1:
           pair = select_crypto()
           exchange = select_exchange()
           ask, bid = get_prices(exchange, pair)
           print("The Ask Price for " + pair + " is " + str(ask))
           print("The Bid Price for " + pair + " is " + str(bid))
           print("\n")
        elif choice == 2:
            pass
            
        elif choice == 3:
            print(top_5)
        elif choice == 4:
            print("bye")
            
        else:
          print("Not An Option ")
          return
      
def display_menu(menu,exit_option=-1):
    for m in menu:
        print(menu.index(m)+1,".  ",m)
    choice = int(input("Enter choice [1-4]: "))
    if choice==exit_option:
        print("Bye")
        quit()
    return choice

def select_crypto():
    pair = ["BCH-BTC", "BCH-ETH","DASH-BTC", "ETC-BTC", "ETH-BTC", "LTC-BTC", "OMG-BTC", "OMG-ETH", "XMR-BTC", "XRP-BTC", "ZEC-BTC", "ZRX-BTC","ZRX-ETH"]

    for p in pair:
        print(pair.index(p)+1,".  ", p)
    crypto = int(input("Please Select Pair to View Price: "))
    item = crypto-1
    pair = pair[item]
    pair = pair.lower().replace('-','')
    return pair

def select_exchange():
    exchanges = [x.lower() for x in all_exchanges_list]
    for e in exchanges:
        print(exchanges.index(e)+1,".  ", e)
    exchange = int(input("Please Select an exchange: "))
    item = exchange-1
    exchange = exchanges[item] 
    return exchange

def get_prices(exchange, pair):
    querystring = {"symbol":'binance:etcbtc'}
    headers = {'Authorization': 'Token 381c9c2468cd4c67b54b8220a81155db9a1d8ac2'}
    response = requests.request("GET", url, headers=headers, params=querystring)
    response = response.text
    parsed = json.loads(response)
    ask = parsed['ask']
    bid = parsed['bid']
    return ask, bid
    





if __name__ == "__main__":
    main()
